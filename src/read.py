#!/usr/bin/env python
import sys
import logging
import h5py
import defopt
import numpy as np
import pandas as pd

columns = [
    "nodeIndex",
    "descendantIndex",
    "snapshotNumber",
    "particleNumber",
    "hostIndex",
    "descendantHost",
    "isMainProgenitor",
]

# def mock(data_frame=False):
#     """Returns a tiny mock dataset
#
#     Arguments:
#         data_frame (bool): whether to return a DataFrame or NumPy array (default is
#         NumPy array)
#     Returns:
#         numpy.ndarray / pandas.DataFrame: small dataset, suitable for testing
#             algorithms in :mod:`src.tree`
#     """
#
#     d = np.array([
#         (0, -1, 4, 10),
#         (1,  0, 3,  8,),
#         (2,  1, 2,  3,),
#         (3,  1, 2,  5),
#         (4,  3, 1,  2),
#         (5,  3, 1,  3),
#         (6, -1, 4,  4),
#         (7,  6, 3,  4),
#         (8,  7, 2,  4),
#         (9,  1, 2,  2)
#     ], dtype=np.dtype([
#         ('nodeIndex', 'int64'),
#         ('descendantIndex', 'int64'),
#         ('snapshotNumber', 'int32'),
#         ('particleNumber', 'int32')
#     ]))
#
#     if data_frame:
#         d = pd.DataFrame(d)
#     return d


def data(file, cache=False):
    """Reads DHalo data into memory

    Output data format:

    ===========  ==================
     Column ID    Column Name
    ===========  ==================
             0    nodeIndex
             1    descendantIndex
             2    snapshotNumber
             3    particleNumber
             4    hostIndex
             5    descendantHost
             6    isMainProgenitor
    ===========  ==================

    nodeIndex:
        index of each halo or subhalo, unique across the entire catalogue
    descendantIndex:
        index of a descendanta halo (if multiple haloes have the same descendatant
        index, they all are the progenitors)
    snapshotNumber:
        snapshot at which halo was identified
    particleNumber:
        number of particles in a halo; might differ from masses identified by other
        methods
    hostIndex:
        index of a host halo; for subhaloes, this points to a parent halo; for main
        haloes, this points to themselves
    descendantHost:
        index of a host halo of descendant of a halo (or subhalo); this field
        eliminates "multiple descendance" problem, always creating a merger history
        which works for main progenitors only
    isMainProgenitor:
        1 if it is

    :param str file: filename of an HDF5 data store
    :param bool cache: filename to which NumPy array object can be saved (for
        faster re-reads);  this is later used for faster data retrieval in
        :func:`src.read.retrieve`;  if ``None``, no data is cached

    :return numpy.ndarray: DHalo catalogue
    """

    with h5py.File(file, 'r') as f:

        d = np.array(
            zip(*[f['/haloTrees/%s' % col].value for col in columns]),
            dtype=[(col, 'int64') for col in columns])

        if cache:
            with open("cache.npy", 'w') as file_cache:
                np.save(file_cache, d)

        # if data_frame:
        #     d = pd.DataFrame(d)\
        #       .set_index(columns[0])

    return d


def retrieve(file="cache.py"):
    """Loads data saved in a NumPy binary format instead of HDF5 catalogue, as
    provided by :func:`src.read.data`

    :param str file: source of NumPy binary store generated by
        :func:`src.read.data`
    """

    return np.load(open(file, 'r'))
