#!/usr/bin/env python3
import logging
import sys

import numpy as np

import halo


def node(h, m, m0, nfw_f):
    return '\t%d [label="%s (%d, %d, %d)", style=filled, fillcolor=%s];\n' % (
        h["nodeIndex"],
        "%d" % (h["nodeIndex"])
        if h["descendantIndex"] == h["descendantHost"]
        else "%d > %d" % (h["nodeIndex"], h["descendantIndex"]),
        h["isMainProgenitor"],
        m,
        h["snapshotNumber"],
        "green" if m > nfw_f * m0 else "red",
    )


def tree(file, t, d, m0, nfw_f):
    """Generates Dot graph from merger tree

    Every node is formatted as follows::

      [nodeIndex | nodeIndex > descendantIndex]
      (isMainProgenitor,
       particleNumber,
       snapshotNumber)

    and is colour coded:

    - green: halo mass exceeds fraction :math:`f`
    - red: halo mmass too small, does not count towards the assembly history

    :param File file: file with Dot output
    :param List[int, List[]] t: merger tree generated by :func:`src.tree.build`
    :param numpy.ndarray d: dataset provided by :mod:`src.read` module
    :param int m0: mass of the root halo
    :param float nfw_f: (default=0.01) NFW :math:`f` parameter
    """
    file.write(node(halo.get(t[0], d), halo.mass(t[0], d), m0, nfw_f))
    for i, _ in enumerate(t[1]):
        file.write("\t%d -> %d;\n" % (t[1][i][0], t[0]))
        tree(file, t[1][i], d, m0, nfw_f)


def mah(file, m, progs):
    """Generates a Dot subgraph with snaphot numbers and progenitors' masses

    Arguments:
        file (File): file with Dot output
        m (numpy.ndarray): mass assembly history generated by
            :func:`src.tree.mah`
        progs (numpy.ndarray): slice of ``data`` containing only progenitors
    """
    file.write("\t%s;" % (" -> ".join(["snap_%03d\n" % (s[1]) for s in m])))
    for s in m:
        file.write('\tsnap_%03d [label="(%d, %03d)"];\n' % (s[1], s[2], s[1]))
        file.write(
            "\t{ rank=same; snap_%03d; %s };"
            % (
                s[1],
                "; \n".join(
                    map(
                        str, progs[progs["snapshotNumber"] == s[1]]["nodeIndex"]
                    )
                ),
            )
        )
